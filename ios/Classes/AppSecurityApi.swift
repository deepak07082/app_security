// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class AppSecurityApiPigeonCodecReader: FlutterStandardReader {
}

private class AppSecurityApiPigeonCodecWriter: FlutterStandardWriter {
}

private class AppSecurityApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AppSecurityApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AppSecurityApiPigeonCodecWriter(data: data)
  }
}

class AppSecurityApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = AppSecurityApiPigeonCodec(readerWriter: AppSecurityApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppSecurityApi {
  func isUseJailBrokenOrRoot() throws -> Bool
  func isDeviceUseVPN() throws -> Bool
  func isItRealDevice() throws -> Bool
  func checkIsTheDeveloperModeOn() throws -> Bool
  func isRunningInTestFlight() throws -> Bool
  func getIMEI() throws -> String?
  func getDeviceId() throws -> String?
  func installSource() throws -> String?
  func isSafeEnvironment() throws -> [String]?
  func installedFromValidSource(sourceList: [String]) throws -> Bool
  func isClonedApp() throws -> Bool
  func openDeveloperSettings() throws -> Bool
  func addFlags(flags: Int64) throws -> Bool
  func clearFlags(flags: Int64) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppSecurityApiSetup {
  static var codec: FlutterStandardMessageCodec { AppSecurityApiPigeonCodec.shared }
  /// Sets up an instance of `AppSecurityApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppSecurityApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let isUseJailBrokenOrRootChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isUseJailBrokenOrRoot\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isUseJailBrokenOrRootChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isUseJailBrokenOrRoot()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isUseJailBrokenOrRootChannel.setMessageHandler(nil)
    }
    let isDeviceUseVPNChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isDeviceUseVPN\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDeviceUseVPNChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDeviceUseVPN()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDeviceUseVPNChannel.setMessageHandler(nil)
    }
    let isItRealDeviceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isItRealDevice\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isItRealDeviceChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isItRealDevice()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isItRealDeviceChannel.setMessageHandler(nil)
    }
    let checkIsTheDeveloperModeOnChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.checkIsTheDeveloperModeOn\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkIsTheDeveloperModeOnChannel.setMessageHandler { _, reply in
        do {
          let result = try api.checkIsTheDeveloperModeOn()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      checkIsTheDeveloperModeOnChannel.setMessageHandler(nil)
    }
    let isRunningInTestFlightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isRunningInTestFlight\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isRunningInTestFlightChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isRunningInTestFlight()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isRunningInTestFlightChannel.setMessageHandler(nil)
    }
    let getIMEIChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.getIMEI\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIMEIChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getIMEI()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getIMEIChannel.setMessageHandler(nil)
    }
    let getDeviceIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.getDeviceId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceIdChannel.setMessageHandler(nil)
    }
    let installSourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.installSource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      installSourceChannel.setMessageHandler { _, reply in
        do {
          let result = try api.installSource()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      installSourceChannel.setMessageHandler(nil)
    }
    let isSafeEnvironmentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isSafeEnvironment\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isSafeEnvironmentChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isSafeEnvironment()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isSafeEnvironmentChannel.setMessageHandler(nil)
    }
    let installedFromValidSourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.installedFromValidSource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      installedFromValidSourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sourceListArg = args[0] as! [String]
        do {
          let result = try api.installedFromValidSource(sourceList: sourceListArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      installedFromValidSourceChannel.setMessageHandler(nil)
    }
    let isClonedAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.isClonedApp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isClonedAppChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isClonedApp()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isClonedAppChannel.setMessageHandler(nil)
    }
    let openDeveloperSettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.openDeveloperSettings\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openDeveloperSettingsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.openDeveloperSettings()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openDeveloperSettingsChannel.setMessageHandler(nil)
    }
    let addFlagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.addFlags\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addFlagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let flagsArg = args[0] as! Int64
        do {
          let result = try api.addFlags(flags: flagsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addFlagsChannel.setMessageHandler(nil)
    }
    let clearFlagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.app_security.AppSecurityApi.clearFlags\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearFlagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let flagsArg = args[0] as! Int64
        do {
          let result = try api.clearFlags(flags: flagsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearFlagsChannel.setMessageHandler(nil)
    }
  }
}
